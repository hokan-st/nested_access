%% Elvis rules should ideally only raise warnings, if the warning is actionable
%% i.e. if the "bad" code can be rewritten in a clearer and more standard style.
%%
%% Some Elvis rules raise a fair number of unhelpful warnings.
%% Using such rules results in the need to scatter -elvis() exceptions across
%% the code base, to suppress these warnings.
%% Such exceptions are problematic:
%% * They clutter up the code base
%% * They can become useless or overly permissive over time, as the codebase
%%   and Elvis change.
%%
%% This config aims at removing the need for -elvis() exceptions
%% by excluding Elvis rules that generate a lot of "false positives".
%% As can be seen in this config file, most rules, about 75% of them can be
%% keept.
%%
%% Note: there could still be the rare edge case, especially in larger projects,
%%       when an exception may still be needed.
%%
%% Tip: some of the problematic rules can still be turned on temporarily
%%      (on a local dev machines) to see if there are issues that should be
%%      fixed.
%%
%% -----------------------------------------------------------------------------
%% This config should work with most projects, but may require minor tweaks
%% if certain rules, like `{elvis_style, atom_naming_convention}` need to
%% support non-standard conventions.
%%
%% NOTE: the `dirs` settings should work for most library and umbrella/release
%%       projects created via rebar3, but it's still HIGHLY recommended to
%%       ENSURE that this is the case for YOUR project, as Elvis may otherwise
%%       fail to check certain files.
%%
%% NOTE: Elvis gets cranky if it can't find at least one file for each
%%       category (dirs-filter pair). This can cause warnings or
%%       errors if there e.g. is no `.hrl` or `rebar.config` file.
%%
%% NOTE: Elvis may raise a lot of warnings if you apply this config to an
%%       existing project, so consider turning on the rules one by one.
%%
%% -----------------------------------------------------------------------------
%% This config doesn't rely on `ruleset` entries, instead all rules are listed
%% explicitly, with some commented out.
%% This avoids having to deal with Elvis adding/removing rulesets or changing
%% the content (rules) in a ruleset, between Elvis versions.
%% It also avoids the possibility of missing rules, if they are not in any
%% `ruleset` (this is probably a non-issue).
%%
%% NOTE - when updating to a newer Elvis version be aware that:
%% * new rules may have been added
%% * old rules may have been deprecated / removed
%% * the defaults for certain rules may have changed
%%   Note: this config mostly uses the defaults, except in rare cases.
%%         In most cases it's probably a good idea to adopt any new defaults.
%%
%% -----------------------------------------------------------------------------
%% This config is made for `rebar3_lint` 4.0.0, which in turn depends on
%% `elvis_core` 4.0.0.
%% Note that some comments in regards to the `main` branch (as of 2025-06) are
%% included.
%%
%% The rules themselves are documented at:
%%
%% * https://github.com/inaka/elvis_core/blob/4.0.0/RULES.md
%% * https://github.com/inaka/elvis_core/blob/main/RULES.md
%%
%% While this `elvis.config` doesn't use rulesets, looking at the rulesets is
%% still helpful to understand which rules are intended for which type of files,
%% see:
%%
%% * https://github.com/inaka/elvis_core/blob/4.0.0/src/elvis_rulesets.erl
%% * https://github.com/inaka/elvis_core/blob/main/src/elvis_rulesets.erl
%%
%% -----------------------------------------------------------------------------
%% A number of checks can be run on .beam files, this include all rules listed
%% in the `beam_files` ruleset and possibly others.
%% According to the Elvis docs, this will result in worse line number info,
%% but is presumably more performant.
%%
%% For now (to keep things simple) .beam files are not used.
%%
%% Note: the `main` branch adds a `beam_files_strict` ruleset, presumably to
%%       align with how `erl_files` and `erl_files_strict` divide rules between
%%       them.
%%
%% -----------------------------------------------------------------------------

%% -----------------------------------------------------------------------------
%% Note: only the first mention of a rule gets comments, this means that most
%%       comments show up for the "*.erl" rule entries.
%% Note: The rule description is summarised or quoted directly above the rule.
%%       Additional thoughts/info/considerations are given as "Note:" at the
%%       start of the comment.
%%       These usually explain why certain rules were disabled/commented out.
%% Note: in elvis_core 4.0.0 the `erl_files_strict` ruleset is a super set
%%       of `erl_files`.
%% Note: Based on the rules mentioned in the docs and the ones used by the
%%       different `ruleset` entries, we can conclude that all rules are present
%%       in at least one `ruleset`.
%% Note: https://github.com/inaka/elvis_core/blob/4.0.0/RULES.md mentions a
%%       `makefiles` ruleset, this doesn't appear to exist, it's probably
%%       a leftover reference from an older Elvis version - the docs list some
%%       rules as deprecated, while at the same time also mentioning that these
%%       rules have not been available since elvis_core 2.0.0.


[
 {elvis,
  [
   {config,
    [
     #{
       dirs => ["src", "test", "benchmark",
                "apps/*/src", "apps/*/test", "apps/*/benchmark"],
       filter => "*.erl",
       rules => [

                 %% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                 %% This first section contain rules that are likely to conflict with code
                 %% formatters like erlfmt, consider disabling these if such tools are used
                 %% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                 %% Max line length = 100 (erlfmt default).
                 %% 101 is used as this rule includes the newline in the count.
                 {elvis_text_style, line_length, #{limit => 101} },

                 %% Ensure spaces around operators.
                 {elvis_style, operator_spaces},

                 %% disallow spaces in certain locations, to improve clarity and consistency
                 %% so that code like:
                 %% `foo (`    must be `foo(`
                 %% `foo(A )`  must be `foo(A)`
                 %% `A , B`    must be `A, B`
                 %% `# {...}`  must be `#{...}`
                 %% `? FOO`    must be `?FOO`
                 {elvis_style, no_space},

                 %% Don't use spaces after the # symbol for maps or records, so no `# {...`
                 %% This improves clarity and consistency.
                 {elvis_style, no_space_after_pound},

                 %% Enforce a `_` style on literal numbers.
                 %% A custom regex is used, as the elvis default accepts anything.
                 %%
                 %% `_` should be used to group number letters in groups of 3.
                 %% So 1_234_567 is valid, while 123_4567 isn't.
                 %%
                 %% Note: some (spoken) languages use different groupings.
                 %% Note: support for `_` was added in Erlang/OTP 23.
                 %%
                 %% Note: short integers (4 letters) are allowed to omit the `_`,
                 %%       so both 1234 and 1_234 are valid.
                 %%       This is done as only longer numbers really benefit from `_`
                 %%       in regards to readability.
                 %% Note: the use of `_` in short numbers makes sense when visual alignment
                 %%       is desired, this typically occurs with "tabular" code like:
                 %%           123
                 %%         1_234
                 %%        12_345
                 %% Note: the regexp below handles regular and non-10 base numbers.
                 %% Note: floats and "numbers" like $a are not handled by `int_regexp`.
                 {elvis_style, numeric_format,
                  #{
                    int_regex => "^([0-9]+#){0,1}"           % check for an optional number base
                    "(([0-9A-Za-z]{1,4})"                    % check for 4 letter number usage
                    "|"
                    "([0-9A-Za-z]{1,3}(_[0-9A-Za-z]{3})*))$" % check `_` usage
                   }
                 },

                 %% Note: to avoid adding TABs in code, use a formatting tool and/or
                 %%       set your editor to use "TABs as spaces" (this is needed for emacs)
                 {elvis_text_style, no_tabs},

                 %% use this to avoid unnecessary diffs in version control caused by trailing spaces
                 %% Note: editors like emacs can be set to show trailing spaces
                 {elvis_text_style, no_trailing_whitespace},

                 %% Not yet usable, in `main` but not in 4.0.0
                 %%
                 %% It's not clear why restricting the amount of formatting white space
                 %% would be a good idea.
                 %% I usually use 1 blank line between function clauses and
                 %% 2 blanks between functions, at least when dealing with longer clauses that
                 %% may contain internal blank lines (used for grouping).
                 %%
                 %% Note: the default allows for 2 consecutive blank lines, which probably
                 %%       is sufficient for most uses.
                 %% Note: erlfmt enforces a similar style by removing more than 2 consecutive
                 %%       blank lines.
                 %%
                 %% {elvis_text_style, no_redundant_blank_lines},

                 %% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                 %% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                 %% Replace all `and` and `or` with `andalso` and `orelse`.
                 %% In the rare cases where `and` and `or` are needed
                 %% (so that both sides always get evaluate) it's straightforward to rewrite
                 %% the code, so that something like:
                 %%     a() and b()
                 %% becomes
                 %%      A = a(), B = b(), A andalso B
                 %% This has the benefit of making the intended and/or behaviour somewhat
                 %% more explicit.
                 {elvis_style, always_shortcircuit},

                 %% Default is sane. It's easy to tweak the atom name regexp,
                 %% if a project uses unusual names.
                 {elvis_style, atom_naming_convention},

                 %% Enforce that only `behaviour` or `behavior` is used.
                 %% Elvis and Erlang default to `behaviour`.
                 {elvis_style, behaviour_spelling},

                 %% Use only one of term() and any() - Elvis defaults to term().
                 {elvis_style, consistent_generic_type},

                 %% Note: what is the scoop of this check? - the docs imply that the check
                 %%       is across functions, so Elvis would need to check in or between modules.
                 %%
                 %% All variables with the same name should use the same
                 %% (upper or lower) casing style. This is to avoid instances
                 %% of UserID mixed with instances of UserId or Userid.
                 {elvis_style, consistent_variable_casing},

                 %% Note: with default settings this causes unwanted warnings in repetitive
                 %%       code, like tests and benchmarks.
                 %%
                 %% {elvis_style, dont_repeat_yourself},

                 %% Export local types used by exported functions.
                 %% This ensures that the type is available to type specs in other modules.
                 {elvis_style, export_used_types},

                 %% Enforce a consistent function name style - lower case using `_` between words.
                 %% If needed it's easy to tweak the regexp for other styles.
                 {elvis_style, function_naming_convention},

                 %% Note: this rule simply checks if there are "too many" functions in a module.
                 %%       This is a rather bad proxy for identifying a "god" module.
                 %%       Modules that expose a public API can e.g. easily end up with too many
                 %%       functions, simply due to the size of the API, regardless of the
                 %%       complexity of the module.
                 %%
                 %% {elvis_style, god_modules},

                 %% Note: this rule limits dynamic calls to modules that implement a behaviour.
                 %%       This seems overly restrictive as passing around a module
                 %%       or function name for callbacks, can be useful at times.
                 %% Note: passing around function/module names is similar to passing around funs
                 %%       with the difference that the name can be checked and printed,
                 %%       which can aid during debugging.
                 %%
                 %% Avoid dynamic calls i.e. Module:f(), m:Function() or
                 %% Module:Function() in modules where no callback attribute
                 %% is defined.
                 %%
                 %% {elvis_style, invalid_dynamic_call},

                 %% Note: it's rare to use macros as function/module names.
                 %%       In the cases it's done, it's likely for performance
                 %%       reasons or to shorten very long function/module names for readability.
                 %%
                 %% Avoid ?MYMOD:myfunc() and mymod:?MYFUNC().
                 %% ?MODULE:myfunc() is fine.
                 %%
                 %% Using macros in dynamic function calls can obscure the intent of
                 %% the code and hinder readability, static analysis, and refactoring tools.
                 %% Macros expand at compile time and may introduce complexity or
                 %% unexpected behaviour when used as dynamic module or function references,
                 %% making the code harder to reason about and debug.
                 %%
                 %% {elvis_style, macro_module_names},

                 %% Note: there might be cases where it might make sense to tweak the
                 %%       rule `regexp` or to make exceptions for certain macros,
                 %%       perhaps to allow for function/module macro names in lower case.
                 %%
                 %% Default regexp enforces upper-case snake case names, for macros.
                 %% Note: this doesn't complain about eunit macros, but does
                 %%       for code like `-define(foo, ...)`
                 {elvis_style, macro_names},

                 %% Limit fun() and function arity (to 5 and 8 respectively by default).
                 %% The limits are somewhat arbitrary but appear
                 %% reasonable, as indicators of when it's time to combine function
                 %% arguments into some kind of record / tuple / map / ...
                 {elvis_style, max_anonymous_function_arity},
                 {elvis_style, max_function_arity},

                 %% Note: this will trigger on any code that has "longish" functions,
                 %%       something which is common in test and benchmark code and
                 %%       can occur in certain `case` clauses that need to handle a
                 %%       large number of cases.
                 %%
                 %% {elvis_style, max_function_clause_length},
                 %% {elvis_style, max_function_length},

                 %% Note: the limit of 500 is rather low. In practice it's probably more
                 %%       like 700-1000 lines as docs, comments and blank lines aren't counted.
                 %% Note: In any reasonably large project there will always be src or test
                 %%       files that are 1000+ lines long, because there is no natural way
                 %%       to split them into smaller files.
                 %%
                 %% {elvis_style, max_module_length},

                 %% Note: if needed it's easy to tweak the regex check pattern.
                 %%
                 %% Enforce a sensible module name style - lower case and `_` separators.
                 {elvis_style, module_naming_convention},

                 %% The library ms_transform needs to be included if the
                 %% function ets:fun2ms() is used in the module.
                 {elvis_style, ms_transform_included},

                 %% XXX Possibly disable this rule. Nesting/complexity checks tend to
                 %%     either be to restrictive, forcing unnatural code splits or they
                 %%     end up being to premissive, which makes them useless.
                 %%
                 %% Note: the docs are a bit unclear on what nested code structure are checked
                 %%       when "nesting" is checked for. The Elvis docs use nested `case`
                 %%       statements as the example.
                 %%       Experimentally it looks like nested statements are checked but that
                 %%       nested data structures aren't (which is good).
                 %%       It also seems that nesting in marcos gets ignored (which is good).
                 %%
                 %% There shouldn't be any nested expressions that exceed
                 %% the specified level. (default = 4).
                 %% Note: with a nesting level of 4, a function with 4 nested `case` statements
                 %%       will result in an Elvis warning.
                 %%
                 %% If the nested expressions are a series of `case` checks with 2 possible
                 %% outcomes ("success" / "error"), then they can probably be rewritten into a
                 %% more sequentially style using a `maybe`, `try` or a series of functions
                 %% that call each other in order.
                 %% Note that `maybe` and `try` are somewhat limited, if the specific "error" needs
                 %% to be identified.
                 %% For more branching nested code, it may be possible to split out some of the
                 %% branches or sub trees into helper functions.
                 {elvis_style, nesting_level},

                 %% Don't add the obsolete -author(...). attribute.
                 {elvis_style, no_author},

                 %% To define a behaviour, use the modern `callback` attribute,
                 %% rather than the older and more limited `behavior_info` or `behaviour_info`.
                 {elvis_style, no_behavior_info},

                 %% Note: while I've seen cases of unnecessary `begin ... end`
                 %%       there are also various cases when `begin ... end` is necessary.
                 %% Note: It might be useful to temporarily toggle on this rule to find
                 %%       poinless uses.
                 %%
                 %% Avoid using `begin ... end`.
                 %%
                 %% {elvis_style, no_block_expressions},

                 %% `no_call_functions` can be used to add a custom list of function calls
                 %%  that should no longer be done.
                 %%  Ideally all uses of such functions should be removed, to avoid having
                 %%  to add -elvis() exceptions for remaining ones.
                 {elvis_style, no_call, #{ no_call_functions => [] }},

                 %% Use try-catch rather than catch,
                 %% try-catch only allocates stacktrace if bound (and used).
                 %%
                 %% Note: Erlang/OTP 28 adds a `warn_deprecated_catch` option
                 %%       "In a future release, the use of the old catch construct will
                 %%        by default result in compiler warnings."
                 %%       - https://www.erlang.org/blog/highlights-otp-28/
                 {elvis_style, no_catch_expressions},

                 %% Note: It doesn't look like that this rule can be configured to
                 %%       recommend better functions.
                 %% Note: the check for more explicit function variants (xxx:call/N vs xxx:call/N+1)
                 %%       have been disabled. The Erlang/OTP defaults are generally fine.
                 %%       Having to always set the timeout explicitly, only invites devs
                 %%       to pick a number at random. This will likely result in a confusing
                 %%       mix of timeout numbers, that look intentional but aren't.
                 %%
                 %% Warn about inefficient functions with better alternatives
                 %% and alternate more explicit variants that should/could be
                 %% used instead.
                 {elvis_style,
                  no_common_caveats_call,
                  %% This is the elvis default with some entries disabled
                  #{caveat_functions => [{timer, send_after, 2},
                                         {timer, send_after, 3},
                                         {timer, send_interval, 2},
                                         {timer, send_interval, 3},
                                         {erlang, size, 1}
                                         %% The functions with explicit variants
                                         %% {gen_statem, call, 2}, % Timeout = infinity
                                         %% {gen_server, call, 2}, % Timeout = 5000
                                         %% {gen_event, call, 3}   % Timeout = 5000
                                        ]
                   }},

                 %% Note: depending on the project, some of these calls may be used for
                 %%       non-debug reasons.
                 %%
                 %% Warn about debug functions in code.
                 {elvis_style, no_debug_call,
                  #{debug_functions => [
                                        %% used to print to console when using Common Test,
                                        %% needed as Common Test typically redirects output
                                        {ct, pal},
                                        {ct, print},

                                        %% Common in programs that write to the console.
                                        %% I've also seen these redirected to log files.
                                        %% {io, format, 1},
                                        %% {io, format, 2},

                                        {erlang, display, 1} % OTP docs "only intended for debug"

                                        %% commonly used when writing to files
                                        %% {io, put_chars, 1},
                                        %% {io, put_chars, 2}
                                       ]
                   }
                 },

                 %% Do not use `$ `, use `$\s` instead.
                 {elvis_style, no_dollar_space},

                 %% Note: `if` should be used if a `case` has degenerated to only checking guards.
                 %% Note: possibly turn this on occasionally to look for unnecessary `if` usages.
                 %%
                 %% {elvis_style, no_if_expression},

                 %% Don't use -import(), the call m:f() is easier to look up than f().
                 %% Note: this is a very uncommon construct in Erlang code bases.
                 {elvis_style, no_import},

                 %% Do not use a list as the parameter for the init/1 callback when implementing
                 %% gen_* behaviours. It's semantically clearer to use a tuple or a map.
                 %% Note: `rebar3 new ...` will create a placeholder xxx_sup.erl (that implements
                 %%       the `supervisor` behaviour) that contains a `init([]) -> ...`
                 {elvis_style, no_init_lists},

                 %% Note: disallowing macros makes little sense, they are heavily used in eunit,
                 %%       for constants and occasionally to manipulate things like records which only
                 %%       exist at compile time.
                 %%
                 %% {elvis_style, no_macros}

                 %% Avoid code like `case #{a := A} = do:something() of ...`
                 {elvis_style, no_match_in_condition},

                 %% Don't nest try-catch, as it gets very messy,
                 %% also note that try-catch can match for different exception classes and
                 %% exception patterns.
                 {elvis_style, no_nested_try_catch},

                 %% `case` code like this is easy to rewrite see:
                 %% https://github.com/inaka/elvis_core/blob/main/doc_rules/
                 %% elvis_style/no_single_clause_case.md
                 {elvis_style, no_single_clause_case},

                 %% Don't use #rec{} in -spec(), instead use a type that maps to records e.g.
                 %% -type rec() :: #rec{}.
                 %% This is needed to make -export_type() work.
                 %% This in turn is needed when specs of exported functions, use the record.
                 {elvis_style, no_spec_with_records},

                 %% Forgetting a comma in [#{a => 1} #{b => 2}]
                 %% results in #{a =>1}#{b => 2} which is probably not intended,
                 %% a intended #{a =>1}#{b => 2} is better written as #{a => 1, b => 2} .
                 {elvis_style, no_successive_maps},

                 %% Note: there are legitimate uses of throw(), e.g. to quickly abort
                 %%       parsing/processing of input data on error.
                 %%
                 %% {elvis_style, no_throw},

                 %% For consistency, in function heads and similar locations, always put
                 %% the match pattern on the left and the parameter on the right, so use:
                 %%    #{pattern := ToMatch} = Param
                 %% rather than:
                 %%    Param = #{pattern := ToMatch}
                 {elvis_style, param_pattern_matching},

                 %% Note: results in false positives - especially when set to check for tuples.
                 %% {elvis_style, private_data_types}

                 %% Every module that implements an OTP behaviour -
                 %% gen_server, gen_event, gen_fsm or supervisor_bridge
                 %% should use a #state{} record and have a state() type.
                 {elvis_style, state_record_and_type},

                 %% Note: using _Var variables in debug code is ok, but it shouldn't be committed.
                 %%
                 %% Don't use a variable whose name indicates that it's actually an
                 %% ignored variable (i.e. it starts with an underscore, like _Var).
                 {elvis_style, used_ignored_variable},

                 %% Default is sane. It's easy to tweak the variable name regexp,
                 %% if a project uses an unusual naming conventions.
                 {elvis_style, variable_naming_convention}

                 %% In `main` but not in 4.0.0 (rule seems good)
                 %%
                 %% Don't do `true == bool_call()` when `bool_call()` is enough.
                 %% {elvis_style, no_boolean_in_comparison},

                 %% In `main` but not in 4.0.0 (rule seems good)
                 %%
                 %% Avoid redundant code like `A < A`, where the same value is used
                 %% on both sides of the operator.
                 %% {elvis_style, no_operation_on_same_value},

                 %% In `main` but not in 4.0.0 (rule seems good)
                 %%
                 %% Note: only works in Erlang/OTP 27+
                 %% {elvis_style, no_single_match_maybe},

                 %% rule crashes in 4.0.0 (rule seems good)
                 %%
                 %% In 4.0.0 this doesn't show up in:
                 %% https://github.com/inaka/elvis_core/blob/4.0.0/src/elvis_rulesets.erl
                 %% It does show up in the docs at:
                 %% https://github.com/inaka/elvis_core/tree/4.0.0/doc_rules/elvis_text_style
                 %% Note that the rules are documented in separate .md files,
                 %% so this rule probably got carried over accidentaly from some kind of
                 %% `main` branch to the 4.0.0 docs.
                 %%
                 %% Don't quote atoms unless necessary
                 %% {elvis_style, prefer_unqouted_atoms}
                ]
      },

     #{ dirs => ["src", "test", "benchmark", "include",
                 "apps/*/src", "apps/*/test", "apps/*/benchmark", "apps/*/include"],
        filter  => "*.hrl",
        rules => [
                  %% Same rules as applied to .erl files (see above), with a few .hrl specific
                  %% ones added at the bottom.
                  %% Most of these rules will probably be of little to no use, as .hrl files
                  %% typically only contain record definitions and macros that define
                  %% constants.
                  %% Note: the ruleset `hrl_files` omits a number of the rules used below.
                  %% Note: Be aware that pretty much any Erlang code can be put into
                  %%       a .hrl file, this includes functions and -export() statements.
                  %%       This in turn means that all .erl rules could be relevant for a .hrl file.

                  %% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                  %% This first section contain rules that are likely to conflict with code
                  %% formatters like erlfmt, consider disabling these if such tools are used
                  %% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                  {elvis_text_style, line_length, #{limit => 101} },
                  {elvis_style, operator_spaces},
                  {elvis_style, no_space},
                  {elvis_style, no_space_after_pound},
                  {elvis_style, numeric_format,
                  #{
                    int_regex => "^([0-9]+#){0,1}"           % check for an optional number base
                    "(([0-9A-Za-z]{1,4})"                    % check for 4 letter number usage
                    "|"
                    "([0-9A-Za-z]{1,3}(_[0-9A-Za-z]{3})*))$" % check `_` usage
                   }
                  },
                  {elvis_text_style, no_tabs},
                  {elvis_text_style, no_trailing_whitespace},
                  %% {elvis_text_style, no_redundant_blank_lines}, % not in 4.0.0

                  %% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                  {elvis_style, always_shortcircuit},
                  {elvis_style, atom_naming_convention},
                  {elvis_style, behaviour_spelling},
                  {elvis_style, consistent_generic_type},
                  {elvis_style, consistent_variable_casing},
                  %% {elvis_style, dont_repeat_yourself},
                  {elvis_style, export_used_types},
                  {elvis_style, function_naming_convention},
                  %% {elvis_style, god_modules},
                  %% {elvis_style, invalid_dynamic_call},
                  %% {elvis_style, macro_module_names},
                  {elvis_style, macro_names},
                  {elvis_style, max_anonymous_function_arity},
                  {elvis_style, max_function_arity},
                  {elvis_style, max_anonymous_function_arity},
                  {elvis_style, max_function_arity},
                  %% {elvis_style, max_function_clause_length},
                  %% {elvis_style, max_function_length},
                  %% {elvis_style, max_module_length},
                  {elvis_style, module_naming_convention},
                  {elvis_style, ms_transform_included},
                  {elvis_style, nesting_level},
                  {elvis_style, no_author},
                  {elvis_style, no_behavior_info},
                  %% {elvis_style, no_block_expressions},
                  {elvis_style, no_call, #{ no_call_functions => [] }},
                  {elvis_style, no_catch_expressions},
                  {elvis_style,
                   no_common_caveats_call,
                   %% This is the elvis default with some entries disabled
                   #{caveat_functions => [{timer, send_after, 2},
                                          {timer, send_after, 3},
                                          {timer, send_interval, 2},
                                          {timer, send_interval, 3},
                                          {erlang, size, 1}
                                          %% {gen_statem, call, 2}, % Timeout = infinity
                                          %% {gen_server, call, 2}, % Timeout = 5000
                                          %% {gen_event, call, 3}   % Timeout = 5000
                                         ]
                   }},
                  {elvis_style, no_debug_call,
                   #{debug_functions => [
                                         %% used to print to console when using Common Test,
                                         %% needed as Common Test typically redirects output
                                         {ct, pal},
                                         {ct, print},

                                         %% Common in programs that write to console.
                                         %% I've also seen this redirected to log files.
                                         %% {io, format, 1},
                                         %% {io, format, 2},

                                         {erlang, display, 1} % OTP docs "only intended for debug"

                                         %% commonly used when writing to files
                                         %% {io, put_chars, 1},
                                         %% {io, put_chars, 2}
                                       ]
                   }
                  },
                  {elvis_style, no_dollar_space},
                  %% {elvis_style, no_if_expression},
                  {elvis_style, no_import},
                  {elvis_style, no_init_lists},
                  %% {elvis_style, no_macros},
                  {elvis_style, no_match_in_condition},
                  {elvis_style, no_nested_try_catch},
                  {elvis_style, no_single_clause_case},
                  {elvis_style, no_spec_with_records},
                  {elvis_style, no_successive_maps},
                  %% {elvis_style, no_throw},
                  {elvis_style, param_pattern_matching},
                  %% {elvis_style, private_data_types}
                  {elvis_style, state_record_and_type},
                  {elvis_style, used_ignored_variable},
                  {elvis_style, variable_naming_convention},

                  %% {elvis_style, no_boolean_in_comparison},   % not in 4.0.0
                  %% {elvis_style, no_operation_on_same_value}, % not in 4.0.0
                  %% {elvis_style, no_single_match_maybe},      % not in 4.0.0
                  %% {elvis_style, prefer_unqouted_atoms},      % not in 4.0.0

                  %% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                  %% Rules only applicable to header files
                  %% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                  %% no -spec in .hrl
                  %% keep -spec next to the function they document, so that they stay in sync
                  {elvis_style, no_specs}

                  %% Note: Header files sometimes contain -record() entries,
                  %%       because multiple modules need to know the definition.
                  %%       According to the {elvis_style, no_spec_with_records} rule,
                  %%       this means that the .hrl file should also contain a
                  %%       matching `-type rec() :: #rec{}.` entry.
                  %%       This will clash with the current rule.
                  %%
                  %% no -type in .hrl
                  %% keep -type in modules and use -export_type() to expose the type,
                  %% this allows for (module) name spaced types
                  %%
                  %% {elvis_style, no_types},

                  %% Not yet usable, in `main` but not in 4.0.0 (probably don't use this rule)
                  %%
                  %% Note: it may be a good idea to occasionally enable this rule to
                  %%       look for bad includes.
                  %% Note: most Erlang projects don't have complex cyclical includes
                  %%       so this rule is unlikely to find any issues.
                  %% Note: there can only be one -elvis() exception entry per .erl file.
                  %%       This means that it's not safe to put an -elvis() exception in a
                  %%       .hrl file (that does nested includes) as this will clash
                  %%       if the .erl file that includes the .hrl, also has an -elvis() entry.
                  %%       Instead .erl files will have to add or update their -elvis() entries,
                  %%       to handle such include files, which is rather awkward.
                  %%
                  %% Don't use -include() and -include_lib() in .hrl files,
                  %% this easily results in cyclical dependencies and other confusion.
                  %% Instead move the includes into the modules that actually need them.
                  %%
                  %% {elvis_style, no_nested_hrls}
                 ]
      },

     #{
       dirs => ["."],
       filter => "elvis.config",
       rules => [
                 {elvis_project, old_configuration_format}
                ]
      },

     %% XXX Add more rules ???
     #{
       dirs => ["."],
       filter => "rebar.config",
       rules => [
                 %% Deps should use a `tag` or `ref` rather `branch` as the dep version.
                 %% This is because a branches can point to different commit over time.
                 {elvis_project, no_branch_deps},

                 %% This check seems somewhat unnecessary as rebar will fail if it fails
                 %% to access/resolve a deps path.
                 %%
                 %% Deps should use known protocols like git and https.
                 %% {elvis_project, protocol_for_deps},

                 {elvis_text_style, line_length, #{limit => 101} },
                 {elvis_text_style, no_tabs},
                 {elvis_text_style, no_trailing_whitespace}
                 %% {elvis_style, no_space}             % crash
                 %% {elvis_style, no_space_after_pound} % crash
                ]
      },

     %% XXX Add more rules ???
     #{
       dirs => ["src",
                "apps/*/src"],
       filter => "*.app.src",
       rules => [
                 {elvis_text_style, line_length, #{limit => 101} },
                 {elvis_text_style, no_tabs},
                 {elvis_text_style, no_trailing_whitespace}
                 %% {elvis_style, no_space}             % crash
                 %% {elvis_style, no_space_after_pound} % crash
                ]
      }

     %% NOT USED FOR NOW
     %% Both of these rules crash elvis with:
     %% Error: 'function_clause' while applying rule 'forbidden_patterns': ...
     %% Error: 'function_clause' while applying rule 'required_patterns': ...
     %% #{
     %%   dirs => ["."],
     %%   filter => ".gitignore",
     %%   rules => [
     %%             %% Warn if .gitignore isn't set up to ignore common (non-repo)
     %%             %% files and folders, e.g. `_build`.
     %%             {elvis_gitignore, required_patterns},
     %%
     %%             %% Warn about files/folders that should never be ignored by git
     %%             %% default regexes = ["^rebar.lock$"]
     %%             %% this aids in ensuring that the `rebar.lock` file gets committed into the repo
     %%             {elvis_gitignore, forbidden_patterns}
     %%            ]
     %%  }
     ]
   }
  ]
 }
].
